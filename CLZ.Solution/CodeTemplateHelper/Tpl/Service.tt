<#@ template debug="true" hostspecific="true" language="C#"  #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core"#>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ include file="../Code/DBSchema.ttinclude"#>
<#@ include file="../Code/MultiDocument.ttinclude"#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//       生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by Ye Fenglei
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using CLZ.Common;
using CLZ.Model;
using CLZ.Model.common;
using CLZ.Model.Sys;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Text;

namespace CLZ.Service
{
    // 注意: 使用“重构”菜单上的“重命名”命令，可以同时更改代码和配置文件中的接口名“IService1”。
    [ServiceContract]
    public interface ICommonService
    {        
	// TODO: 在此添加您的服务操作
<#
    var dbSchema=DBSchemaFactory.GetDBSchema();
    List<string> tableList=dbSchema.GetTablesList();
    foreach(string tableName in tableList)
    {
        Table table=dbSchema.GetTableMetadata(tableName);
#>
		#region <#= tableName#>

        public List<<#= tableName#>> getAll<#= tableName#>()
        {
            try
            {
                DBContainer db = new DBContainer();
                return db.<#= tableName#>.ToList();
            }
            catch (Exception ex)
            {
                ExceptionHelper.WriteException(ex);
                return null;
            }

        }


        public int Add<#= tableName#>(<#= tableName#> model,ref ValidationError error)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    db.<#= tableName#>.Add(model);
                    db.Entry(model).State = EntityState.Added;
                    return (db.SaveChanges());
                }
            }
            catch (Exception ex)
            {
                ExceptionHelper.WriteException(ex);
                error.ErrorMessage = ex.Message;
                return 0;
            }

        }


        public <#= tableName#> get<#= tableName#>ById(<#=table.GetPKColumns()#>)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    <#= tableName#> obj = db.<#= tableName#>.Where(n => n.Id == id).SingleOrDefault();
                    return obj;
                }
            }
            catch (Exception ex)
            {
                ExceptionHelper.WriteException(ex);
                return null;
            }

        }

        public int Edit<#= tableName#>(<#= tableName#> model,ref ValidationError error)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    db.<#= tableName#>.Attach(model);
                    db.Entry(model).State = EntityState.Modified;
                    return db.SaveChanges();
                }
            }
            catch (Exception ex)
            {
                ExceptionHelper.WriteException(ex);
                error.ErrorMessage = ex.Message;
                return 0;
            }
            

        }

        public int Delete<#= tableName#>(<#=table.GetPKColumns()#>,ref ValidationError error)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    <#= tableName#> obj = db.<#= tableName#>.Where(n => n.Id == id).SingleOrDefault();
                    db.<#= tableName#>.Remove(obj);
                    return db.SaveChanges();
                }
            }
            catch (Exception ex)
            {
                error.ErrorMessage = ex.Message;
                ExceptionHelper.WriteException(ex);
                return 0;
            }

        }

        
        

        /// <summary>
        /// 获取分页数据
        /// </summary>
        /// <param name="pager"></param>
        /// <returns></returns>
        public List<<#= tableName#>> Get<#= tableName#>List(ref GridPager pager)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    IQueryable<<#= tableName#>> queryData = null;
                    queryData = db.<#= tableName#>;
                    int total = queryData.Count();
                    pager.totalRows = total;
                    queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
                    return queryData.ToList();
                }
            }
            catch (Exception ex)
            {
                ExceptionHelper.WriteException(ex);
                return null;
            }

        }
        #endregion

<#

    }
    dbSchema.Dispose();
#>
	}
}