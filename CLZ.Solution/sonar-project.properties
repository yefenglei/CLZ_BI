####################################################################################
# The properties below are for the sonar project, not pertain to the C# plugins
####################################################################################

# Project identification
# This defines a unique key for the project that will be created in the sonar. Use the java package naming convention to define it.
sonar.projectKey=com.xdclz.clz

# The projectVersion can be ovrriden in Jenkins with the build number
sonar.projectVersion= 1.1

# The project name that will be displayed in the Sonar web interface, make it meaningful.
sonar.projectName= cailanzi

# Info required for Sonar
sonar.sources=.

# Tell the source code is C#.
sonar.language=cs

# Source Encoding
sonar.sourceEncoding=UTF-8

####################################################################################
# The properties below are for the C# plugins
####################################################################################
# Specify the assembly to analyze.  It could point to the build output folder.
# Note: the absolute path is used here as relative path doesn't work for me.
sonar.dotnet.assemblies = $(SolutionDir)/CLZ.Common/bin/CLZ.Common.dll

# Specify the tests projects so that the code in the test project will not counted as the production code.
# Note the separator is ';', and there is a typo in the key but do not attempt to correct it.
sonar.donet.visualstudio.testProjectPattern = *CLZ.UnitTest

# Sepcify the test assumblies which include the test cases, i.e. the build output of the test projects.  
# Note the separator is ','.  This allows us to have 2 test projects.
sonar.dotnet.test.assemblies = $(SolutionDir)/CLZ.UnitTest/bin/Debug/CLZ.UnitTest.dll
sonar.gallio.runner = C:/Program Files/Gallio/bin/Gallio.Echo.exe

# Ignore the generated files to avoid bias on the result
# Note the separator is ','
sonar.exclusions = **/Generated.cs,**/Constants_Dynamic*.cs
